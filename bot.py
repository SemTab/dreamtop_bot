import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.types import Message, BotCommand
from aiogram.filters import Command
from db import (
    init_db, add_user, get_user, get_user_by_id, get_user_by_username,
    update_coins, update_last_reward, get_all_users,
    transfer_coins, update_ban, check_ban, unban_user,
    initialize_default_cryptocurrencies, update_all_crypto_prices,
    get_all_cryptocurrencies, get_cryptocurrency_by_symbol,
    get_user_portfolio, buy_crypto, sell_crypto, get_portfolio_value
)

TOKEN = "–°–Æ–î–ê –í–ê–® –¢–û–ö–ï–ù"
bot = Bot(token="8021847142:AAHjPFSj9syBKg66V13B7lHMwpv2Sm4ld8M")
dp = Dispatcher()

# ----------------- ADMIN -----------------
def load_admins():
    with open("admins.txt", "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def is_admin(username: str):
    admins = load_admins()
    return username in admins

# ----------------- /start -----------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    if add_user(user_id, username):
        await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {username}! –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {username}! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö‚úÖ")

# ----------------- /reward -----------------
@dp.message(Command("reward"))
async def cmd_reward(message: Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start")
        return
    banned, until, reason = check_ban(user[0])
    if banned:
        await message.answer(f"‚ùå –í—ã –≤ –±–∞–Ω–µ –¥–æ {until}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return
    last_reward = datetime.strptime(user[3], "%Y-%m-%d %H:%M:%S")
    if datetime.now() - last_reward < timedelta(hours=1):
        remaining = timedelta(hours=1) - (datetime.now() - last_reward)
        await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {remaining.seconds // 60} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º /reward.")
        return
    balance = user[2]
    reward = max(700, balance // 10)
    update_coins(user[0], balance + reward)
    update_last_reward(user[0])
    await message.answer(f"üí∞ –¢—ã –ø–æ–ª—É—á–∏–ª {reward} –º–æ–Ω–µ—Ç! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance + reward}")
# ----------------- /casino -----------------
@dp.message(Command("casino"))
async def cmd_casino(message: Message):
    parts = message.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /casino <—Å—Ç–∞–≤–∫–∞>")
        return

    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start")
        return

    banned, until, reason = check_ban(user[0])
    if banned:
        await message.answer(f"‚ùå –í—ã –≤ –±–∞–Ω–µ –¥–æ {until}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return

    bet = int(parts[1])
    balance = user[2]
    if bet <= 0 or bet > balance:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞.")
        return

    if random.random() < 0.5:
        balance -= bet
        await message.answer(f"üíÄ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {bet} –º–æ–Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å: {balance}")
    else:
        win = bet * 2
        balance += bet
        await message.answer(f"üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª {win} –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balance}")

    update_coins(user[0], balance)

# ----------------- /pay -----------------
@dp.message(Command("pay"))
async def cmd_pay(message: Message):
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pay <user_id –∏–ª–∏ username> <–∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç>")
        return

    target = parts[1]
    try:
        amount = int(parts[2])
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if amount <= 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return

    sender_id = message.from_user.id
    sender = get_user(sender_id)
    banned, until, reason = check_ban(sender_id)
    if banned:
        await message.answer(f"‚ùå –í—ã –≤ –±–∞–Ω–µ –¥–æ {until}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return

    
    if target.isdigit():
        recipient = get_user_by_id(int(target))
    else:
        if target.startswith("@"):
            target = target[1:]
        recipient = get_user_by_username(target)

    if recipient is None:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    recipient_id = recipient[0]
    if sender_id == recipient_id:
        await message.answer("–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return

    if transfer_coins(sender_id, recipient_id, amount):
        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient[1]}")
    else:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")

# ----------------- –¢–æ–ø 10 -----------------
@dp.message(Command("top"))
async def cmd_top(message: Message):
    users = get_all_users()
    text = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:\n"
    for uid, uname, coins in users:
        text += f"‚Ä¢ <a href='tg://user?id={uid}'>{uname}</a> ‚Äî {coins} –º–æ–Ω–µ—Ç\n"
    await message.answer(text, parse_mode="HTML")

# ----------------- /balance -----------------
@dp.message(Command("balance"))
async def cmd_balance(message: Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start")
        return

    banned, until, reason = check_ban(user[0])
    if banned:
        await message.answer(f"‚ùå –í—ã –≤ –±–∞–Ω–µ –¥–æ {until}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return

    await message.answer(f"üí∞ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[2]} –º–æ–Ω–µ—Ç")

# ----------------- /crypto -----------------
@dp.message(Command("crypto"))
async def cmd_crypto(message: Message):
    cryptos = get_all_cryptocurrencies()
    if not cryptos:
        await message.answer("‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    text = "üíé <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n\n"
    for crypto in cryptos:
        crypto_id, name, symbol, price, volatility, description = crypto[:6]
        change_emoji = "üìà" if random.random() > 0.5 else "üìâ"
        text += f"{change_emoji} <b>{name} ({symbol})</b>\nüí∞ –¶–µ–Ω–∞: ${price:.2f}\nüìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility*100:.1f}%\n\n"

    await message.answer(text, parse_mode="HTML")

# ----------------- /buy_crypto -----------------
@dp.message(Command("buy_crypto"))
async def cmd_buy_crypto(message: Message):
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy_crypto <—Å–∏–º–≤–æ–ª> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return

    symbol = parts[1].upper()
    try:
        amount = float(parts[2])
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if amount <= 0:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return

    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start")
        return

    banned, until, reason = check_ban(user[0])
    if banned:
        await message.answer(f"‚ùå –í—ã –≤ –±–∞–Ω–µ –¥–æ {until}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return

    crypto = get_cryptocurrency_by_symbol(symbol)
    if not crypto:
        await message.answer(f"‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ '{symbol}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    crypto_id, name, symbol, price, volatility, description = crypto
    total_cost = price * amount
    user_balance = user[2]

    if user_balance < total_cost:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ: {total_cost:.2f}, —É –≤–∞—Å: {user_balance:.2f}")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
    update_coins(user[0], user_balance - total_cost)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏–ø—Ç—É –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å
    buy_crypto(user[0], crypto_id, amount, price)

    await message.answer(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {amount:.4f} {symbol} –ø–æ —Ü–µ–Ω–µ ${price:.2f}\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.2f}\nüí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user_balance - total_cost:.2f}")

# ----------------- /sell_crypto -----------------
@dp.message(Command("sell_crypto"))
async def cmd_sell_crypto(message: Message):
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sell_crypto <—Å–∏–º–≤–æ–ª> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return

    symbol = parts[1].upper()
    try:
        amount = float(parts[2])
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if amount <= 0:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return

    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start")
        return

    banned, until, reason = check_ban(user[0])
    if banned:
        await message.answer(f"‚ùå –í—ã –≤ –±–∞–Ω–µ –¥–æ {until}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return

    crypto = get_cryptocurrency_by_symbol(symbol)
    if not crypto:
        await message.answer(f"‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ '{symbol}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    crypto_id, name, symbol, current_price, volatility, description = crypto

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—Ä–∏–ø—Ç–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
    portfolio = get_user_portfolio(user[0])
    crypto_in_portfolio = None
    for portfolio_crypto in portfolio:
        if portfolio_crypto[4] == symbol:  # symbol
            crypto_in_portfolio = portfolio_crypto
            break

    if not crypto_in_portfolio or crypto_in_portfolio[0] < amount:
        await message.answer(f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {symbol} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
        return

    # –ü—Ä–æ–¥–∞–µ–º –∫—Ä–∏–ø—Ç—É
    if sell_crypto(user[0], crypto_id, amount):
        revenue = current_price * amount
        update_coins(user[0], user[2] + revenue)

        await message.answer(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {amount:.4f} {symbol} –ø–æ —Ü–µ–Ω–µ ${current_price:.2f}\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${revenue:.2f}\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user[2] + revenue:.2f}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.")

# ----------------- /portfolio -----------------
@dp.message(Command("portfolio"))
async def cmd_portfolio(message: Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start")
        return

    banned, until, reason = check_ban(user[0])
    if banned:
        await message.answer(f"‚ùå –í—ã –≤ –±–∞–Ω–µ –¥–æ {until}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return

    portfolio = get_user_portfolio(user[0])
    if not portfolio:
        await message.answer("üì¶ –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /crypto —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.")
        return

    total_value = get_portfolio_value(user[0])
    text = f"üì¶ <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:.2f}\n\n"

    for amount, avg_buy_price, crypto_id, name, symbol, current_price in portfolio:
        profit_loss = (current_price - avg_buy_price) * amount
        profit_emoji = "üü¢" if profit_loss >= 0 else "üî¥"
        text += f"{profit_emoji} <b>{name} ({symbol})</b>\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount:.4f}\nüí∞ –°—Ä. —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${avg_buy_price:.2f}\nüí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}\nüí∞ –ü/–£: ${profit_loss:.2f}\n\n"

    await message.answer(text, parse_mode="HTML")

# ----------------- /crypto_chart -----------------
@dp.message(Command("crypto_chart"))
async def cmd_crypto_chart(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        cryptos = get_all_cryptocurrencies()
        if not cryptos:
            await message.answer("‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        text = "üíé –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:\n\n"
        for crypto in cryptos:
            crypto_id, name, symbol, price, volatility, description = crypto[:6]
            text += f"üìä {name} ({symbol}) - /crypto_chart_{symbol}\n"

        text += "\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /crypto_chart <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–∏–º–≤–æ–ª>"
        await message.answer(text)
        return

    # –ò—â–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å–∏–º–≤–æ–ª—É
    search_term = " ".join(parts[1:]).strip().upper()

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
    crypto = get_cryptocurrency_by_symbol(search_term)
    if not crypto:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª—É, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        cryptos = get_all_cryptocurrencies()
        for c in cryptos:
            crypto_id, name, symbol, price, volatility, description = c[:6]
            if name.upper() == search_term or symbol.upper() == search_term:
                crypto = c
                break

    if not crypto:
        await message.answer(f"‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /crypto —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ.")
        return

    crypto_id, name, symbol, current_price, volatility, description = crypto

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    history = get_crypto_price_history(crypto_id, 1000)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    if not history:
        await message.answer(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è {name}.")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω
    text = f"üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω {name} ({symbol})\n"
    text += f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    recent_history = history[-20:] if len(history) > 20 else history

    for i, (price, timestamp) in enumerate(reversed(recent_history), 1):
        from datetime import datetime
        try:
            dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
            formatted_time = dt.strftime("%d.%m %H:%M")
        except:
            formatted_time = timestamp[:16]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ HH:MM

        text += f"{i:2d}. ${price:8.2f} - {formatted_time}\n"

    if len(history) > 20:
        text += f"\n... –∏ –µ—â–µ {len(history) - 20} –∑–∞–ø–∏—Å–µ–π"

    await message.answer(text)

# ----------------- /addcoins (–∞–¥–º–∏–Ω) -----------------
@dp.message(Command("addcoins"))
async def cmd_addcoins(message: Message):
    if not is_admin(message.from_user.username):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addcoins <user_id –∏–ª–∏ @username> <–∫–æ–ª-–≤–æ>")
        return

    target = parts[1]
    try:
        amount = int(parts[2])
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if target.isdigit():
        user = get_user_by_id(int(target))
    else:
        if target.startswith("@"):
            target = target[1:]
        user = get_user_by_username(target)

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    update_coins(user[0], user[2] + amount)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[1]}")

# ----------------- /removecoins (–∞–¥–º–∏–Ω) -----------------
@dp.message(Command("removecoins"))
async def cmd_removecoins(message: Message):
    if not is_admin(message.from_user.username):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removecoins <user_id –∏–ª–∏ @username> <–∫–æ–ª-–≤–æ>")
        return

    target = parts[1]
    try:
        amount = int(parts[2])
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if target.isdigit():
        user = get_user_by_id(int(target))
    else:
        if target.startswith("@"):
            target = target[1:]
        user = get_user_by_username(target)

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    new_balance = max(0, user[2] - amount)
    update_coins(user[0], new_balance)
    await message.answer(f"‚úÖ –°–Ω—è—Ç–æ {amount} –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[1]}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")

# ----------------- /ban (–∞–¥–º–∏–Ω) -----------------
@dp.message(Command("ban"))
async def cmd_ban(message: Message):
    if not is_admin(message.from_user.username):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = message.text.split(maxsplit=3)
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id –∏–ª–∏ username> <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –∏–ª–∏ forever> [–ø—Ä–∏—á–∏–Ω–∞]")
        return

    target = parts[1]
    duration = parts[2]
    reason = parts[3] if len(parts) > 3 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"

    if target.isdigit():
        user = get_user_by_id(int(target))
    else:
        if target.startswith("@"):
            target = target[1:]
        user = get_user_by_username(target)

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if duration == "forever":
        until = "forever"
    else:
        try:
            minutes = int(duration)
            until = (datetime.now() + timedelta(minutes=minutes)).strftime("%Y-%m-%d %H:%M:%S")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –±–∞–Ω–∞.")
            return

    update_ban(user[0], until, reason)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} –∑–∞–±–∞–Ω–µ–Ω –¥–æ {duration}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

# ----------------- /unban (–∞–¥–º–∏–Ω) -----------------
@dp.message(Command("unban"))
async def cmd_unban(message: Message):
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id –∏–ª–∏ @username> <–ø—Ä–∏—á–∏–Ω–∞>")
        return

    target = parts[1]
    reason = " ".join(parts[2:])

    if target.isdigit():
        user = get_user_by_id(int(target))
    else:
        if target.startswith("@"):
            target = target[1:]
        user = get_user_by_username(target)

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    unban_user(user[0])
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} —Ä–∞–∑–±–∞–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

#---------------------HELP----------------------------
@dp.message(Command("help"))
async def cmd_help(message: Message):
    text = (
        "üìú <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</b>\n\n"
        "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ:</b>\n"
        "/start ‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ\n"
        "/reward ‚Äî –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É (—Ä–∞–∑ –≤ —á–∞—Å)\n"
        "/balance ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/casino ‚Äî –°—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ\n"
        "/pay ‚Äî –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/top ‚Äî –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É\n"
        "/crypto ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
        "/buy_crypto ‚Äî –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
        "/sell_crypto ‚Äî –ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
        "/portfolio ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å\n"
        "/crypto_chart ‚Äî –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
        "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        
    )
    if is_admin(message.from_user.username):
            text += (
            "üõ† <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ:</b>\n"
            "/addcoins [id/username] (—Å—É–º–º–∞) ‚Äî –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã\n"
            "/removecoins [id/username] (—Å—É–º–º–∞) ‚Äî –°–Ω—è—Ç—å –º–æ–Ω–µ—Ç—ã\n"

            "üõ†–≠—Ç–æ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∂–µ–ª–∞—é —Ö–æ—Ä–æ—à–µ–≥–æ –æ–±—â–µ–Ω–∏—èüòé"
              )
    await message.answer(text, parse_mode="HTML")
    
# ----------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ -----------------
async def set_commands(bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand(command="reward", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"),
        BotCommand(command="casino", description="–°—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ"),
        BotCommand(command="pay", description="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
        BotCommand(command="top", description="–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"),
        BotCommand(command="balance", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="crypto", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"),
        BotCommand(command="buy_crypto", description="–ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"),
        BotCommand(command="sell_crypto", description="–ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"),
        BotCommand(command="portfolio", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"),
        BotCommand(command="crypto_chart", description="–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"),
        BotCommand(command="ban", description="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)"),
        BotCommand(command="unban", description="–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)"),
        BotCommand(command="addcoins", description="–í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω)"),
        BotCommand(command="removecoins", description="–°–Ω—è—Ç—å –º–æ–Ω–µ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)")
     ]
    await bot.set_my_commands(commands)

# ----------------- –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç -----------------
async def crypto_price_updater():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    while True:
        try:
            update_all_crypto_prices()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        await asyncio.sleep(300)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# ----------------- –ó–∞–ø—É—Å–∫  -----------------
async def main():
    init_db()
    # initialize_default_cryptocurrencies()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —É–±–∏—Ä–∞–µ–º
    await set_commands(bot)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    asyncio.create_task(crypto_price_updater())

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
