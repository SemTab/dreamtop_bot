import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.types import Message, BotCommand
from aiogram.filters import Command
from db import (
    init_db, add_user, get_user, get_user_by_id, get_user_by_username,
    update_coins, update_last_reward, get_all_users,
    transfer_coins, update_ban, check_ban, unban_user
)

TOKEN = "–°–Æ–î–ê –í–ê–® –¢–û–ö–ï–ù"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ----------------- ADMIN -----------------
def load_admins():
    with open("admins.txt", "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def is_admin(username: str):
    admins = load_admins()
    return username in admins

# ----------------- /start -----------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    if add_user(user_id, username):
        await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {username}! –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {username}! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö‚úÖ")

# ----------------- /reward -----------------
@dp.message(Command("reward"))
async def cmd_reward(message: Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start")
        return
    banned, until, reason = check_ban(user[0])
    if banned:
        await message.answer(f"‚ùå –í—ã –≤ –±–∞–Ω–µ –¥–æ {until}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return
    last_reward = datetime.strptime(user[3], "%Y-%m-%d %H:%M:%S")
    if datetime.now() - last_reward < timedelta(hours=1):
        remaining = timedelta(hours=1) - (datetime.now() - last_reward)
        await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {remaining.seconds // 60} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º /reward.")
        return
    balance = user[2]
    reward = max(700, balance // 10)
    update_coins(user[0], balance + reward)
    update_last_reward(user[0])
    await message.answer(f"üí∞ –¢—ã –ø–æ–ª—É—á–∏–ª {reward} –º–æ–Ω–µ—Ç! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance + reward}")
# ----------------- /casino -----------------
@dp.message(Command("casino"))
async def cmd_casino(message: Message):
    parts = message.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /casino <—Å—Ç–∞–≤–∫–∞>")
        return

    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start")
        return

    banned, until, reason = check_ban(user[0])
    if banned:
        await message.answer(f"‚ùå –í—ã –≤ –±–∞–Ω–µ –¥–æ {until}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return

    bet = int(parts[1])
    balance = user[2]
    if bet <= 0 or bet > balance:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞.")
        return

    if random.random() < 0.5:
        balance -= bet
        await message.answer(f"üíÄ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {bet} –º–æ–Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å: {balance}")
    else:
        win = bet * 2
        balance += bet
        await message.answer(f"üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª {win} –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balance}")

    update_coins(user[0], balance)

# ----------------- /pay -----------------
@dp.message(Command("pay"))
async def cmd_pay(message: Message):
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pay <user_id –∏–ª–∏ username> <–∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç>")
        return

    target = parts[1]
    try:
        amount = int(parts[2])
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if amount <= 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return

    sender_id = message.from_user.id
    sender = get_user(sender_id)
    banned, until, reason = check_ban(sender_id)
    if banned:
        await message.answer(f"‚ùå –í—ã –≤ –±–∞–Ω–µ –¥–æ {until}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return

    
    if target.isdigit():
        recipient = get_user_by_id(int(target))
    else:
        if target.startswith("@"):
            target = target[1:]
        recipient = get_user_by_username(target)

    if recipient is None:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    recipient_id = recipient[0]
    if sender_id == recipient_id:
        await message.answer("–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return

    if transfer_coins(sender_id, recipient_id, amount):
        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient[1]}")
    else:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")

# ----------------- –¢–æ–ø 10 -----------------
@dp.message(Command("top"))
async def cmd_top(message: Message):
    users = get_all_users()
    text = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:\n"
    for uid, uname, coins in users:
        text += f"‚Ä¢ <a href='tg://user?id={uid}'>{uname}</a> ‚Äî {coins} –º–æ–Ω–µ—Ç\n"
    await message.answer(text, parse_mode="HTML")

# ----------------- /balance -----------------
@dp.message(Command("balance"))
async def cmd_balance(message: Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start")
        return

    banned, until, reason = check_ban(user[0])
    if banned:
        await message.answer(f"‚ùå –í—ã –≤ –±–∞–Ω–µ –¥–æ {until}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return

    await message.answer(f"üí∞ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[2]} –º–æ–Ω–µ—Ç")

# ----------------- /addcoins (–∞–¥–º–∏–Ω) -----------------
@dp.message(Command("addcoins"))
async def cmd_addcoins(message: Message):
    if not is_admin(message.from_user.username):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addcoins <user_id –∏–ª–∏ @username> <–∫–æ–ª-–≤–æ>")
        return

    target = parts[1]
    try:
        amount = int(parts[2])
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if target.isdigit():
        user = get_user_by_id(int(target))
    else:
        if target.startswith("@"):
            target = target[1:]
        user = get_user_by_username(target)

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    update_coins(user[0], user[2] + amount)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[1]}")

# ----------------- /removecoins (–∞–¥–º–∏–Ω) -----------------
@dp.message(Command("removecoins"))
async def cmd_removecoins(message: Message):
    if not is_admin(message.from_user.username):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removecoins <user_id –∏–ª–∏ @username> <–∫–æ–ª-–≤–æ>")
        return

    target = parts[1]
    try:
        amount = int(parts[2])
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if target.isdigit():
        user = get_user_by_id(int(target))
    else:
        if target.startswith("@"):
            target = target[1:]
        user = get_user_by_username(target)

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    new_balance = max(0, user[2] - amount)
    update_coins(user[0], new_balance)
    await message.answer(f"‚úÖ –°–Ω—è—Ç–æ {amount} –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[1]}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")

# ----------------- /ban (–∞–¥–º–∏–Ω) -----------------
@dp.message(Command("ban"))
async def cmd_ban(message: Message):
    if not is_admin(message.from_user.username):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = message.text.split(maxsplit=3)
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id –∏–ª–∏ username> <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –∏–ª–∏ forever> [–ø—Ä–∏—á–∏–Ω–∞]")
        return

    target = parts[1]
    duration = parts[2]
    reason = parts[3] if len(parts) > 3 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"

    if target.isdigit():
        user = get_user_by_id(int(target))
    else:
        if target.startswith("@"):
            target = target[1:]
        user = get_user_by_username(target)

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if duration == "forever":
        until = "forever"
    else:
        try:
            minutes = int(duration)
            until = (datetime.now() + timedelta(minutes=minutes)).strftime("%Y-%m-%d %H:%M:%S")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –±–∞–Ω–∞.")
            return

    update_ban(user[0], until, reason)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} –∑–∞–±–∞–Ω–µ–Ω –¥–æ {duration}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

# ----------------- /unban (–∞–¥–º–∏–Ω) -----------------
@dp.message(Command("unban"))
async def cmd_unban(message: Message):
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id –∏–ª–∏ @username> <–ø—Ä–∏—á–∏–Ω–∞>")
        return

    target = parts[1]
    reason = " ".join(parts[2:])

    if target.isdigit():
        user = get_user_by_id(int(target))
    else:
        if target.startswith("@"):
            target = target[1:]
        user = get_user_by_username(target)

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    unban_user(user[0])
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} —Ä–∞–∑–±–∞–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

#---------------------HELP----------------------------
@dp.message(Command("help"))
async def cmd_help(message: Message):
    text = (
        "üìú <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</b>\n\n"
        "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ:</b>\n"
        "/start ‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ\n"
        "/reward ‚Äî –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É (—Ä–∞–∑ –≤ —á–∞—Å)\n"
        "/balance ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/casino ‚Äî –°—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ\n"
        "/top ‚Äî –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É\n"
        "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        
    )
    if is_admin(message.from_user.username):
            text += (
            "üõ† <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ:</b>\n"
            "/addcoins [id/username] (—Å—É–º–º–∞) ‚Äî –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã\n"
            "/removecoins [id/username] (—Å—É–º–º–∞) ‚Äî –°–Ω—è—Ç—å –º–æ–Ω–µ—Ç—ã\n"

            "üõ†–≠—Ç–æ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∂–µ–ª–∞—é —Ö–æ—Ä–æ—à–µ–≥–æ –æ–±—â–µ–Ω–∏—èüòé"
              )
    await message.answer(text, parse_mode="HTML")
    
# ----------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ -----------------
async def set_commands(bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand(command="reward", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"),
        BotCommand(command="casino", description="–°—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ"),
        BotCommand(command="pay", description="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
        BotCommand(command="top", description="–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"),
        BotCommand(command="ban", description="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)"),
        BotCommand(command="unban", description="–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)"),
        BotCommand(command="addcoins", description="–í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω)"),
        BotCommand(command="removecoins", description="–°–Ω—è—Ç—å –º–æ–Ω–µ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)")
     ]
    await bot.set_my_commands(commands)

# ----------------- –ó–∞–ø—É—Å–∫  -----------------
async def main():
    init_db()
    await set_commands(bot)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
